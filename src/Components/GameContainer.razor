@inject IJSRuntime JsRuntime

@if (Model != null) {
	<Menu Game="Model" />
	<div class="wall-container">
		<div
			class="game-container"
			style="@gameContainerCss"
			tabindex="0"
			@onkeydown="HandleKeyPress"
			@ref="gameRef"
			@onfocusout="FocusOnGameContainer"
		>
			@if (!Model.IsRunning) {
				<button @onclick="HandleStartClick" class="start">Start</button>
			}

			<div class="rect border" />
			<div class="middle border">
				<div class="square" />
				<div class="square2" />
			</div>
			<div class="line" />
			<div class="rect border" />

			<Ball Model="Model.Ball" IsRunning="Model.IsRunning" />
			<Paddle Model="@Model.UserPaddle" AudioData="@Model.AudioData" />
			<Paddle Model="@Model.ComputerPaddle" AudioData="@Model.AudioData" />

			<Score Model="Model.UserScore" side="right" />
			<Score Model="Model.ComputerScore" side="left" />

			@foreach (var obstacle in Model.ObstacleList) {
				<Obstacle Model="obstacle" @key="obstacle.Id" />
			}
		</div>
	</div>
}

@code {
	string gameContainerCss => $"width: {Model?.containerDimensions.x/15}rem; height: {Model?.containerDimensions.y/15}rem";
	ElementReference gameRef;

	private async void FocusOnGameContainer() {
		await Task.Delay(10); // 10 ms
		await JsRuntime.InvokeVoidAsync("focusOnElement", gameRef);
	}
	async Task HandleStartClick() {
		if (Model?.IsRunning == false) {
			Model.StartGame();
			FocusOnGameContainer();

			await JsRuntime.InvokeVoidAsync("playAudio");
		}
	}
	void HandleKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "ArrowUp")
			Model?.MoveUserPaddleUp();
		if (e.Key == "ArrowDown")
			Model?.MoveUserPaddleDown();
	}

	[Parameter] public GameManager? Model { get; set; }
}