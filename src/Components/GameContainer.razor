@inject IJSRuntime JsRuntime

<Menu Game="Model" />
<div class="wall-container">
	<div class="game-container" style="@gameContainerCss" tabindex="0" @onkeydown="HandleKeyPress">
		@if (Model == null) {
			<h1>Loading...</h1>
		}
		else {
			@if (!Model.IsRunning) {
				<button @onclick="HandleStartClick" class="start">Start</button>
			}

			<div class="rect border"></div>	
				<div class="middle border">
					<div class="square">
					</div>
					<div class="square2">
					</div>
				</div>
				<div class="line"></div>	
				<div class="rect border"></div>

				<Ball Model="Model.Ball" IsRunning="Model.IsRunning" />
				<Paddle Model="Model.UserPaddle" />
				<Paddle Model="Model.ComputerPaddle" />

				<Score Model="Model.UserScore" side="right" />
				<Score Model="Model.ComputerScore" side="left" />
		}
	</div>
</div>

@code {
	GameManager? Model { get; set; }

	string gameContainerCss => $"width: {Model?.containerDimensions.x/15}rem; height: {Model?.containerDimensions.y/15}rem";

	protected override async Task OnInitializedAsync()
	{
		Dimensions windowDimensions = await JsRuntime.InvokeAsync<Dimensions>("getWindowDimensions");
		Dimensions containerDimensions = new Dimensions(windowDimensions.x * 0.9, windowDimensions.y * 0.8); // 90% x 80%

		Model = new GameManager(containerDimensions, 1 * 60);
		Model.MainLoopCompleted += (o,e) => StateHasChanged();
	}

	void HandleStartClick() {
		if (Model?.IsRunning == false)
			Model.StartGame();
	}

	void HandleKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "ArrowUp")
			Model?.MoveUserPaddleUp();
		if (e.Key == "ArrowDown")
			Model?.MoveUserPaddleDown();
	}
}