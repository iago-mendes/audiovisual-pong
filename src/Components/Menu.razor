@inject IJSRuntime JsRuntime

<div class="menu">
	<div class="actions">
			@if (Game?.IsPaused == true) {
				<button title="Continue" @onclick="handlePauseOrContinueClick">
					<svg class="continue-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 86 86">	
						<path
							stroke="none"
							d="M34.339745962156 9.6987298107781a10 10 0 0 1 17.320508075689 0l32.679491924311 56.602540378444a10 10 0 0 1 -8.6602540378444 15l-65.358983848622 0a10 10 0 0 1 -8.6602540378444 -15"
						/>
					</svg>
				</button>
			}
			else {
				<button title="Pause" @onclick="handlePauseOrContinueClick">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10">
						<rect width="4" height="10" />
						<rect x="6" width="4" height="10" />
					</svg>
				</button>
			}
		<button title="Stop" @onclick="handleStopClick">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10">
				<rect width="10" height="10" />
			</svg>
		</button>
	</div>
	<div class="timer">
		<span>@getFormattedTime()</span>
	</div>
</div>

@code {
	string getFormattedTime() {
		int time = Game != null ? Game.TimeLeft : 0;
		int minutes = time / 60;
		int seconds = minutes > 0 ? time % (minutes * 60) : time;

		string secondsPadding = seconds < 10 ? "0" : "";
		string formattedTime = $"{minutes}:{secondsPadding}{seconds}";
		return formattedTime;
	}

	async void handlePauseOrContinueClick() {
		if (Game?.IsRunning == false)
			return;

		Game?.TogglePauseGame();

		if (Game?.IsPaused == true)
			await JsRuntime.InvokeVoidAsync("pauseAudio");
		else
			await JsRuntime.InvokeVoidAsync("playAudio");
	}
	async void handleStopClick() {
		Game?.StopGame();

		await JsRuntime.InvokeVoidAsync("resetAudio");
	}

	[Parameter] public GameManager? Game { get; set; }
}
